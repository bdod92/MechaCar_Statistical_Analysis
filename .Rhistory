q()
demo()
print("Hello World!")
print("Hello World!", quote=FALSE)
print(paste("Hi, ","how "," are ", "you?"))
print(paste("Hi,","how"," are", "you?"))
options("repos" = c(iCRAN = "https://ussd.artifactory.illumina.com/iCRAN/", CRAN = "https://cran.rstudio.com/")) # Set CRAN to something else if you want a different mirror
options("repos" = c(iCRAN = "https://ussd.artifactory.illumina.com/iCRAN/", CRAN = "https://cran.rstudio.com/")) # Set CRAN to something else if you want a different mirror
options("repos" = c(iCRAN = "https://ussd.artifactory.illumina.com/iCRAN/", CRAN = "https://cran.rstudio.com/")) # Set CRAN to something else if you want a different mirror
usethis::edit_r_profile()
install.packages("devtools")
library(tidyverse)
if (!exists("getOligoInfoDynamic")) source("//ussd-prd-mpe03/r work/Oligo/Query Functions - OMG LIMS/getOligoInfoDynamic.R")
whatrotor = getOligoInfoDynamic("RunID-Viper_Std_80mer_2022_01_06_1130AM",input_type = "customer", incl_synth_details = T, incl_oligo_info = T)
rotor = getOligoInfoDynamic(whatrotor$Rotor_Batch, input_type = "Rotor_Batch", incl_synth_details = T)
install.packages(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
if (!exists("getOligoInfoDynamic")) source("//ussd-prd-mpe03/r work/Oligo/Query Functions - OMG LIMS/getOligoInfoDynamic.R")
whatrotor = getOligoInfoDynamic("RunID-Maverick_Std_80mer_2022_01_24_0830AM",input_type = "customer", incl_synth_details = T, incl_oligo_info = T)
rotor = getOligoInfoDynamic(whatrotor$Rotor_Batch, input_type = "Rotor_Batch", incl_synth_details = T)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
if (!exists("getOligoInfoDynamic")) source("//ussd-prd-mpe03/r work/Oligo/Query Functions - OMG LIMS/getOligoInfoDynamic.R")
whatrotor = getOligoInfoDynamic("RunID-Maverick_Std_80mer_2022_01_24_0830AM",input_type = "customer", incl_synth_details = T, incl_oligo_info = T)
rotor = getOligoInfoDynamic(whatrotor$Rotor_Batch, input_type = "Rotor_Batch", incl_synth_details = T)
install.packages("devtools")
installed.packages(rJava)
install.packages(rJava)
usethis::edit_r_profile()
install.packages("executr")
library(tidyverse)
if (!exists("getOligoInfoDynamic")) source("//ussd-prd-mpe03/r work/Oligo/Query Functions - OMG LIMS/getOligoInfoDynamic.R")
COP = getOligoInfoDynamic("OM0326168-COP",input_type = "Collection Plate", incl_synth_details = T, incl_OD_results = T)
install.packages(tidyverse)
library(tidyverse)
install.packages(writexl)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("writexl")
source("~/R/Oligo Scripts/pull_QCO_data.R", echo=TRUE)
source("~/R/Oligo Scripts/pull_QCO_data.R", echo=TRUE)
source("~/R/Oligo Scripts/pull_QCO_data.R", echo=TRUE)
source("~/R/Oligo Scripts/pull_QCO_data.R", echo=TRUE)
source("~/R/Oligo Scripts/pull_QCO_data.R", echo=TRUE)
# Change the file path to export to different locations. Spaces appear to be fine in both directory (folder) names and final doc. names
write_xlsx(COP,"C:\\Users\\bdodson\\OneDrive - Illumina, Inc\\Documents\\R\\Oligo Scripts\\OM0326169-COP_QCO_History.xlsx")
source("~/R/Oligo Scripts/pull_QCO_data.R", echo=TRUE)
# Change the file path to export to different locations. Spaces appear to be fine in both directory (folder) names and final doc. names
write_xlsx(COP,"C:\\Users\\bdodson\\OneDrive - Illumina, Inc\\Documents\\R\\Oligo Scripts\\OM0325068-COP_QCO_History.xlsx")
source("~/R/Oligo Scripts/pull_QCO_data.R", echo=TRUE)
source("~/R/Oligo Scripts/pull_QCO_data.R", echo=TRUE)
source("~/R/Oligo Scripts/pull_QCO_data.R", echo=TRUE)
source("~/R/Oligo Scripts/pull_QCO_data.R", echo=TRUE)
# Must import "tidyverse" and "writexl" via install.packages() function if they have not previously been installed
library(tidyverse)
library(writexl)
if (!exists("getOligoInfoDynamic")) source("//ussd-prd-mpe03/r work/Oligo/Query Functions - OMG LIMS/getOligoInfoDynamic.R")
COP = getOligoInfoDynamic("OM0325069-COP",input_type = "Collection Plate", incl_synth_details = T, incl_OD_results = T)
# Change the file path to export to different locations. Spaces appear to be fine in both directory (folder) names and final doc. names
write_xlsx(COP,"C:\\Users\\bdodson\\OneDrive - Illumina, Inc\\Documents\\R\\Oligo Scripts\\OM0325069-COP_QCO_History_NEW.xlsx")
# type_map = c("LIMS_WO"              = "wo_to.object_name",
#              "JDE Work Order"       = "wo_to.object_name",
#              "DesignID"             = "wo.coda_project_id",
#              "Sub_Work_Order"       = "wo.sub_work_order",
#              "part_name"            = "pnm.part_name",
#              "part_number"          = "oo.part_number",
#              "OSU Plate"            = "sp_to.object_name",
#              "Decoder Oligo Bottle" = "dob_to.object_name",
#              "Collection Plate"     = "cp_to.object_name",
#              "Mass Spec Plate"      = "pwmsp_to.object_name",
#              "LIMS_SalesOrder"      = "wo.po_number",
#              "Order_ID"             = "oo_to.object_name",
#              "Oligo Order"          = "oo_to.object_name",
#              "Batch_ID"             = "obc_to.object_name",
#              "Oligo Batch"          = "obc_to.object_name",
#              "Big Bird Run Batch"   = "rb_to.object_name",
#              "SynthesisEnd"         = "rb_t_end.tran_date",
#              "SynthesisStart"       = "rb_t_start.tran_date",
#              "WO_Date"              = "wo_t.tran_date",
#              "MSRunID"              = "msrun.id",
#              "MSRunDate"            = "msrun.process_date",
#              # "MSRunDate"            = "msrun.processing_date_time",
#              "Mass Spec Run"        = "msrun_to.object_name",
#              "MSRunName"            = "msrun_to.object_name",
#              "customer"             = "cd.contact_name",
#              "sequence"             = "o.sequence",
#              "Rotor_Batch"          = "rob_to.object_name")
#
# "incl_oligo_info"]       = incl_oligo_info | incl_synth_info | incl_cleave_info | incl_decoder_info | incl_OD_results | incl_ms_smmry | incl_ms_details
# "incl_oligo_level_cols"] = incl_oligo_info | incl_OD_results | incl_ms_smmry | incl_ms_details
# "incl_synth_info"]       = incl_synth_info | incl_synth_details | incl_cleave_info | incl_decoder_info | incl_OD_results | incl_ms_smmry | incl_ms_details
# "incl_synth_details"]    = incl_synth_details
# "incl_cleave_info"]      = incl_cleave_info
# "incl_decoder_info"]     = incl_decoder_info
# incl_OD_results"]       = incl_OD_results
# "incl_ms_smmry"]         = incl_ms_smmry | incl_ms_details
# "incl_ms_details"]       = incl_ms_details
View(COP)
View(getOligoInfoDynamic)
install.packages("executr")
install.packages("writexl")
write_xlsx(a,"C:\\Users\\eslahtasky\\OneDrive - Illumina, Inc\\Documents\\Cleaver Update\\Test7.xlsx")
install.packages("writexl")
remove.packages("writexl")
install.packages("writexl")
print "hello world"
print ("hello world")
install.packages("devtools")
a = getOligoInfoDynamic("OM2674778-OSU",input_type = "OSU Plate", incl_OD_results = T, incl_ms_smmry = T)
if (!exists("getOligoInfoDynamic")) source("//ussd-prd-mpe03/r work/Oligo/Query Functions - OMG LIMS/getOligoInfoDynamic.R")
a = getOligoInfoDynamic("OM2674778-OSU",input_type = "OSU Plate", incl_OD_results = T, incl_ms_smmry = T)
library("writexl")
write_xlsx(a,"C:\\Users\\bdodson\\OneDrive - Illumina, Inc\\Documents\\Cleaver Update\\Test7.xlsx")
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot
plt + geom_bar() #plot a bar graph
library(ggplot2)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot
plt + geom_bar() #plot a bar graph
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot
plt + geom_bar() #plot a bar graph
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create a summary table
plt <- ggplot(mpg_summary, aes(x=manufacturer, y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
library(tidyverse)
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=manufacturer, y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
library(tidyverse)
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=manufacturer, y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
library(tidyverse)
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=manufacturer, y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
library(tidyverse)
library(ggplot2)
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=manufacturer, y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg, manufacturer =="toyota") %>% group_by(cy1) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=cyl,y=Mean_Hwy))
mpg_summary <- subset(mpg, manufacturer =="toyota") %>% group_by(cy1) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=cy1,y=Mean_Hwy))
head(mpg)
mpg_summary <- subset(mpg, manufacturer =="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=cyl,y=Mean_Hwy))
View(mpg_summary)
mpg_summary <- subset(mpg, manufacturer =="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=cyl,y=Mean_Hwy))
plt + geom_line()
mpg_summary <- subset(mpg, manufacturer =="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=cyl,y=Mean_Hwy))
plt + geom_line() + scale_x_discrete(limits = c(4,6,8)) +  scale_y_continuous(breaks = c(15:30))
plt <- ggplot(mpg, aes(x=displ,y=cty))
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
#improved scatter plot
plt <- ggplot(mpg,aes(x=displ, y=cty,color=class))# import data
plt + geom_point() + labs(x="engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
#improved scatter plot
plt <- ggplot(mpg,aes(x=displ, y=cty,color=class))# import data
plt + geom_point() + labs(x="engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", shape = "Type of Drive")
#box plot
plt <- ggplot(mpg, aes(y=hwy)) #import data set into ggplot2
plt + geom_boxplot()
#box plot with multiple inputs
plt <- ggplot(mpg, aes(x=manufacturer, y=hwy))
plt + geom_boxplot() + theme(axis.test.x=element_text(angle=45, hjust=1))
#box plot with multiple inputs
plt <- ggplot(mpg, aes(x=manufacturer, y=hwy))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45, hjust=1))
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_title() + labs(x="Vehicle Class", y="Vehicle Year", fill = "Mean Highway (MPG)")
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class", y="Vehicle Year", fill = "Mean Highway (MPG)")
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
# more specific heat map
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
#layering / faceting plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
#layering example
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
#layering example
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
clear()
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
#split into separate graphs
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
shapiro.test(mtcars$wt)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
setwd("C:/Users/bdodson/Box/Personal/School/Data_Science_UCSD/Week 15 (R)/01_Demo")
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
#perform log10 transformation to adjust for skew
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
#plot data
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
#perform log10 transformation to adjust for skew
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
#perform log10 transformation to adjust for skew
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
#perform log10 transformation to adjust for skew
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
# two sample t_test to compare miles driven for each car
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
> sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
# two sample t_test to compare miles driven for each car
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
# two sample t_test to compare miles driven for each car
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
# two sample t_test to compare miles driven for each car
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
# two sample t_test to compare miles driven for each car
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
# two sample t_test to compare miles driven for each car
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
# two sample t_test to compare miles driven for each car
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
# two sample t_test to compare miles driven for each car
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
#paired t-test comparing mpg for 1999 cars vs 2008 cars
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
#paired t-test comparing mpg for 1999 cars vs 2008 cars
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
#statistical difference in hp of vehicle based on engine type
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor. Must be done for ANOVA testing
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
#statistical difference in hp of vehicle based on engine type
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor. Must be done for ANOVA testing
summary(aov(hp ~ cyl,data=mtcars_filt)) #compare means across multiple levels
#does quartermile race time correlate with hp
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
#create a chi2 analysis
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("C:/Users/bdodson/Box/Personal/School/Data_Science_UCSD/Week 15 (R)/MechaCar_Statistical_Analysis")
library(dplyr)
mechaCarDF <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
View(mechaCarDF)
> t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
?lm()
library(dplyr)
mechaCarDF <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
lm(Vehicle_Length, Vehicle_Weight,data=mechaCarDF)
library(dplyr)
mechaCarDF <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
lm(vehicle_length, vehicle_weight,data=mechaCarDF)
library(dplyr)
mechaCarDF <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
lm(mpg,data=mechaCarDF)
library(dplyr)
mechaCarDF <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
lm(mpg,AWD,data=mechaCarDF)
library(dplyr)
mechaCarDF <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
lm(mpg ~ AW + data=mechaCarDF)
library(dplyr)
mechaCarDF <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
lm(mpg ~ AWD + vehicle_length, data=mechaCarDF)
library(dplyr)
mechaCarDF <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mechaCarDF)
library(dplyr)
mechaCarDF <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mechaCarDF))
library(dplyr)
mechaCarDF <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
summary(lm(mpg + vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mechaCarDF))
library(dplyr)
mechaCarDF <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
summary(lm(mpg + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mechaCarDF))
library(dplyr)
mechaCarDF <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mechaCarDF))
library(dplyr)
mechaCarMPGDF <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mechaCarMPGDF))
mechaCarSusDF <- read.csv('Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
View(mechaCarSusDF)
total_summary <- summarize(mechaCarSusDF)
View(total_summary)
total_summary <- summarize(Mean = mean(mechaCarSusDF$PSI), Median = median(mechaCarSusDF$PSI), Variance = variance(mechaCarSusDF$PSI), Standard_Deviation = sd(mechaCarSusDF$PSI))
mechaCarSusDF$PSI
total_summary <- summarize(Mean = mean(mechaCarSusDF$PSI), Median = median(mechaCarSusDF$PSI), Variance = var(mechaCarSusDF$PSI), Standard_Deviation = sd(mechaCarSusDF$PSI))
total_summary <- summarize(Mean = mean(mechaCarSusDF$PSI), Median = median(mechaCarSusDF$PSI), Variance = var(mechaCarSusDF$PSI), Standard_Deviation = sd(mechaCarSusDF$PSI), .groups = 'keep')
summarize_demo <- demo_table2 %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep')
total_summary <- summarize(Mean = mean(mechaCarSusDF$"PSI"), Median = median(mechaCarSusDF$"PSI"), Variance = var(mechaCarSusDF$"PSI"), Standard_Deviation = sd(mechaCarSusDF$"PSI"), .groups = 'keep')
total_summary <- summarise(Mean = mean(mechaCarSusDF$"PSI"), Median = median(mechaCarSusDF$"PSI"), Variance = var(mechaCarSusDF$"PSI"), Standard_Deviation = sd(mechaCarSusDF$"PSI"), .groups = 'keep')
total_summary <- mechaCarSusDF %>% summarize(Mean = mean("PSI"), Median = median("PSI"), Variance = var("PSI"), Standard_Deviation = sd("PSI"), .groups = 'keep')
total_summary <- mechaCarSusDF %>% group_by(PSI) %>% summarize(Mean = mean("PSI"), Median = median("PSI"), Variance = var("PSI"), Standard_Deviation = sd("PSI"), .groups = 'keep')
View(total_summary)
total_summary <- mechaCarSusDF %>% group_by(PSI) %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), Standard_Deviation = sd(PSI), .groups = 'keep')
View(total_summary)
View(total_summary)
?summarize()
var(mechaCarSusDF$PSI)
total_summary <- mechaCarSusDF %>% group_by(PSI) %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(mechaCarSusDF$PSI), Standard_Deviation = sd(PSI), .groups = 'keep')
View(total_summary)
total_summary <- mechaCarSusDF %>% group_by(PSI) %>% summarize(Mean = mean(mechaCarSusDF$PSI), Median = median(mechaCarSusDF$PSI), Variance = var(mechaCarSusDF$PSI), Standard_Deviation = sd(mechaCarSusDF$PSI), .groups = 'keep')
View(total_summary)
total_summary <- mechaCarSusDF%>% summarize(Mean = mean(mechaCarSusDF$PSI), Median = median(mechaCarSusDF$PSI), Variance = var(mechaCarSusDF$PSI), Standard_Deviation = sd(mechaCarSusDF$PSI), .groups = 'keep')
View(total_summary)
total_summary <- mechaCarSusDF %>% group_by(Manufacturing_Lot) %>%summarize(Mean = mean(mechaCarSusDF$PSI), Median = median(mechaCarSusDF$PSI), Variance = var(mechaCarSusDF$PSI), Standard_Deviation = sd(mechaCarSusDF$PSI), .groups = 'keep')
total_summary <- mechaCarSusDF%>% summarize(Mean = mean(mechaCarSusDF$PSI), Median = median(mechaCarSusDF$PSI), Variance = var(mechaCarSusDF$PSI), Standard_Deviation = sd(mechaCarSusDF$PSI), .groups = 'keep')
lot_summary <- mechaCarSusDF %>% group_by(Manufacturing_Lot) %>%summarize(Mean = mean(mechaCarSusDF$PSI), Median = median(mechaCarSusDF$PSI), Variance = var(mechaCarSusDF$PSI), Standard_Deviation = sd(mechaCarSusDF$PSI), .groups = 'keep')
View(lot_summary)
View(lot_summary)
total_summary <- mechaCarSusDF%>% summarize(Mean = mean(mechaCarSusDF$PSI), Median = median(mechaCarSusDF$PSI), Variance = var(mechaCarSusDF$PSI), SD = sd(mechaCarSusDF$PSI), .groups = 'keep')
lot_summary <- mechaCarSusDF %>% group_by(Manufacturing_Lot) %>%summarize(Mean = mean(mechaCarSusDF$PSI), Median = median(mechaCarSusDF$PSI), Variance = var(mechaCarSusDF$PSI), SD = sd(mechaCarSusDF$PSI), .groups = 'keep')
lot_summary <- mechaCarSusDF %>% group_by(Manufacturing_Lot)
View(lot_summary)
lot_summary <- mechaCarSusDF %>% group_by(Manufacturing_Lot) %>%summarize(Mean = mean(mechaCarSusDF$PSI), Median = median(mechaCarSusDF$PSI), Variance = var(mechaCarSusDF$PSI), SD = sd(mechaCarSusDF$PSI), .groups = 'keep')
View(lot_summary)
lot_summary <- mechaCarSusDF %>% group_by(Manufacturing_Lot) %>%summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI), .groups = 'keep')
View(lot_summary)
View(mechaCarDF)
